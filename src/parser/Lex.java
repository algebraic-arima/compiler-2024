// Generated from Lex.g4 by ANTLR 4.7.1

package src.parser;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class Lex extends Lexer {
	static { RuntimeMetaData.checkVersion("4.7.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		VOID=1, BOOL=2, INT=3, STRING=4, NEW=5, CLASS=6, NULL=7, TRUE=8, FALSE=9, 
		THIS=10, IF=11, ELSE=12, FOR=13, WHILE=14, BREAK=15, CONTINUE=16, RETURN=17, 
		WS=18, CMT=19, LPAR=20, RPAR=21, LBKT=22, RBKT=23, LBCE=24, RBCE=25, QUES=26, 
		COLON=27, SEMI=28, COMMA=29, ADD=30, SUB=31, MUL=32, DIV=33, MOD=34, LT=35, 
		GT=36, LEQ=37, GEQ=38, EQ=39, NEQ=40, AND=41, OR=42, NOT=43, BLS=44, BRS=45, 
		BAND=46, BOR=47, BXOR=48, BNOT=49, ASSIGN=50, SINC=51, SDEC=52, MEMB=53, 
		INTCONST=54, STRINGCONST=55, FMTSTRPURE=56, FMTSTREND=57, FMTSTRBODY=58, 
		FMTSTRBGN=59, ID=60;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] ruleNames = {
		"VOID", "BOOL", "INT", "STRING", "NEW", "CLASS", "NULL", "TRUE", "FALSE", 
		"THIS", "IF", "ELSE", "FOR", "WHILE", "BREAK", "CONTINUE", "RETURN", "WS", 
		"CMT", "LPAR", "RPAR", "LBKT", "RBKT", "LBCE", "RBCE", "QUES", "COLON", 
		"SEMI", "COMMA", "ADD", "SUB", "MUL", "DIV", "MOD", "LT", "GT", "LEQ", 
		"GEQ", "EQ", "NEQ", "AND", "OR", "NOT", "BLS", "BRS", "BAND", "BOR", "BXOR", 
		"BNOT", "ASSIGN", "SINC", "SDEC", "MEMB", "INTCONST", "STRINGCONST", "FMTSTRPURE", 
		"FMTSTREND", "FMTSTRBODY", "FMTSTRBGN", "ID", "STRCHAR", "FMTSTRCHAR"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'void'", "'bool'", "'int'", "'string'", "'new'", "'class'", "'null'", 
		"'true'", "'false'", "'this'", "'if'", "'else'", "'for'", "'while'", "'break'", 
		"'continue'", "'return'", null, null, "'('", "')'", "'['", "']'", "'{'", 
		"'}'", "'?'", "':'", "';'", "','", "'+'", "'-'", "'*'", "'/'", "'%'", 
		"'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'&&'", "'||'", "'!'", "'<<'", 
		"'>>'", "'&'", "'|'", "'^'", "'~'", "'='", "'++'", "'--'", "'.'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "VOID", "BOOL", "INT", "STRING", "NEW", "CLASS", "NULL", "TRUE", 
		"FALSE", "THIS", "IF", "ELSE", "FOR", "WHILE", "BREAK", "CONTINUE", "RETURN", 
		"WS", "CMT", "LPAR", "RPAR", "LBKT", "RBKT", "LBCE", "RBCE", "QUES", "COLON", 
		"SEMI", "COMMA", "ADD", "SUB", "MUL", "DIV", "MOD", "LT", "GT", "LEQ", 
		"GEQ", "EQ", "NEQ", "AND", "OR", "NOT", "BLS", "BRS", "BAND", "BOR", "BXOR", 
		"BNOT", "ASSIGN", "SINC", "SDEC", "MEMB", "INTCONST", "STRINGCONST", "FMTSTRPURE", 
		"FMTSTREND", "FMTSTRBODY", "FMTSTRBGN", "ID"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public Lex(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Lex.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2>\u019f\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3"+
		"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\b"+
		"\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13"+
		"\3\13\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3"+
		"\17\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3"+
		"\21\3\21\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3"+
		"\23\6\23\u00dd\n\23\r\23\16\23\u00de\3\23\3\23\3\24\3\24\3\24\3\24\7\24"+
		"\u00e7\n\24\f\24\16\24\u00ea\13\24\3\24\3\24\3\24\3\24\3\24\7\24\u00f1"+
		"\n\24\f\24\16\24\u00f4\13\24\3\24\3\24\5\24\u00f8\n\24\3\24\3\24\3\25"+
		"\3\25\3\26\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34"+
		"\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3"+
		"%\3%\3&\3&\3&\3\'\3\'\3\'\3(\3(\3(\3)\3)\3)\3*\3*\3*\3+\3+\3+\3,\3,\3"+
		"-\3-\3-\3.\3.\3.\3/\3/\3\60\3\60\3\61\3\61\3\62\3\62\3\63\3\63\3\64\3"+
		"\64\3\64\3\65\3\65\3\65\3\66\3\66\3\67\3\67\7\67\u014c\n\67\f\67\16\67"+
		"\u014f\13\67\3\67\5\67\u0152\n\67\38\38\78\u0156\n8\f8\168\u0159\138\3"+
		"8\38\39\39\39\39\79\u0161\n9\f9\169\u0164\139\39\39\3:\3:\7:\u016a\n:"+
		"\f:\16:\u016d\13:\3:\3:\3;\3;\7;\u0173\n;\f;\16;\u0176\13;\3;\3;\3<\3"+
		"<\3<\3<\7<\u017e\n<\f<\16<\u0181\13<\3<\3<\3=\3=\7=\u0187\n=\f=\16=\u018a"+
		"\13=\3>\3>\3>\3>\3>\3>\3>\5>\u0193\n>\3?\3?\3?\3?\3?\3?\3?\3?\3?\5?\u019e"+
		"\n?\5\u00e8\u00f2\u0157\2@\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25"+
		"\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32"+
		"\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a"+
		"\62c\63e\64g\65i\66k\67m8o9q:s;u<w=y>{\2}\2\3\2\t\5\2\13\f\17\17\"\"\3"+
		"\2\63;\3\2\62;\4\2C\\c|\6\2\62;C\\aac|\6\2\2!$$^^\u0081\u0081\7\2\2!$"+
		"$&&^^\u0081\u0081\2\u01af\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2"+
		"\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2"+
		"\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3"+
		"\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2"+
		"\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67"+
		"\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2"+
		"\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2"+
		"\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]"+
		"\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2"+
		"\2\2\2k\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\2q\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2"+
		"\2w\3\2\2\2\2y\3\2\2\2\3\177\3\2\2\2\5\u0084\3\2\2\2\7\u0089\3\2\2\2\t"+
		"\u008d\3\2\2\2\13\u0094\3\2\2\2\r\u0098\3\2\2\2\17\u009e\3\2\2\2\21\u00a3"+
		"\3\2\2\2\23\u00a8\3\2\2\2\25\u00ae\3\2\2\2\27\u00b3\3\2\2\2\31\u00b6\3"+
		"\2\2\2\33\u00bb\3\2\2\2\35\u00bf\3\2\2\2\37\u00c5\3\2\2\2!\u00cb\3\2\2"+
		"\2#\u00d4\3\2\2\2%\u00dc\3\2\2\2\'\u00f7\3\2\2\2)\u00fb\3\2\2\2+\u00fd"+
		"\3\2\2\2-\u00ff\3\2\2\2/\u0101\3\2\2\2\61\u0103\3\2\2\2\63\u0105\3\2\2"+
		"\2\65\u0107\3\2\2\2\67\u0109\3\2\2\29\u010b\3\2\2\2;\u010d\3\2\2\2=\u010f"+
		"\3\2\2\2?\u0111\3\2\2\2A\u0113\3\2\2\2C\u0115\3\2\2\2E\u0117\3\2\2\2G"+
		"\u0119\3\2\2\2I\u011b\3\2\2\2K\u011d\3\2\2\2M\u0120\3\2\2\2O\u0123\3\2"+
		"\2\2Q\u0126\3\2\2\2S\u0129\3\2\2\2U\u012c\3\2\2\2W\u012f\3\2\2\2Y\u0131"+
		"\3\2\2\2[\u0134\3\2\2\2]\u0137\3\2\2\2_\u0139\3\2\2\2a\u013b\3\2\2\2c"+
		"\u013d\3\2\2\2e\u013f\3\2\2\2g\u0141\3\2\2\2i\u0144\3\2\2\2k\u0147\3\2"+
		"\2\2m\u0151\3\2\2\2o\u0153\3\2\2\2q\u015c\3\2\2\2s\u0167\3\2\2\2u\u0170"+
		"\3\2\2\2w\u0179\3\2\2\2y\u0184\3\2\2\2{\u0192\3\2\2\2}\u019d\3\2\2\2\177"+
		"\u0080\7x\2\2\u0080\u0081\7q\2\2\u0081\u0082\7k\2\2\u0082\u0083\7f\2\2"+
		"\u0083\4\3\2\2\2\u0084\u0085\7d\2\2\u0085\u0086\7q\2\2\u0086\u0087\7q"+
		"\2\2\u0087\u0088\7n\2\2\u0088\6\3\2\2\2\u0089\u008a\7k\2\2\u008a\u008b"+
		"\7p\2\2\u008b\u008c\7v\2\2\u008c\b\3\2\2\2\u008d\u008e\7u\2\2\u008e\u008f"+
		"\7v\2\2\u008f\u0090\7t\2\2\u0090\u0091\7k\2\2\u0091\u0092\7p\2\2\u0092"+
		"\u0093\7i\2\2\u0093\n\3\2\2\2\u0094\u0095\7p\2\2\u0095\u0096\7g\2\2\u0096"+
		"\u0097\7y\2\2\u0097\f\3\2\2\2\u0098\u0099\7e\2\2\u0099\u009a\7n\2\2\u009a"+
		"\u009b\7c\2\2\u009b\u009c\7u\2\2\u009c\u009d\7u\2\2\u009d\16\3\2\2\2\u009e"+
		"\u009f\7p\2\2\u009f\u00a0\7w\2\2\u00a0\u00a1\7n\2\2\u00a1\u00a2\7n\2\2"+
		"\u00a2\20\3\2\2\2\u00a3\u00a4\7v\2\2\u00a4\u00a5\7t\2\2\u00a5\u00a6\7"+
		"w\2\2\u00a6\u00a7\7g\2\2\u00a7\22\3\2\2\2\u00a8\u00a9\7h\2\2\u00a9\u00aa"+
		"\7c\2\2\u00aa\u00ab\7n\2\2\u00ab\u00ac\7u\2\2\u00ac\u00ad\7g\2\2\u00ad"+
		"\24\3\2\2\2\u00ae\u00af\7v\2\2\u00af\u00b0\7j\2\2\u00b0\u00b1\7k\2\2\u00b1"+
		"\u00b2\7u\2\2\u00b2\26\3\2\2\2\u00b3\u00b4\7k\2\2\u00b4\u00b5\7h\2\2\u00b5"+
		"\30\3\2\2\2\u00b6\u00b7\7g\2\2\u00b7\u00b8\7n\2\2\u00b8\u00b9\7u\2\2\u00b9"+
		"\u00ba\7g\2\2\u00ba\32\3\2\2\2\u00bb\u00bc\7h\2\2\u00bc\u00bd\7q\2\2\u00bd"+
		"\u00be\7t\2\2\u00be\34\3\2\2\2\u00bf\u00c0\7y\2\2\u00c0\u00c1\7j\2\2\u00c1"+
		"\u00c2\7k\2\2\u00c2\u00c3\7n\2\2\u00c3\u00c4\7g\2\2\u00c4\36\3\2\2\2\u00c5"+
		"\u00c6\7d\2\2\u00c6\u00c7\7t\2\2\u00c7\u00c8\7g\2\2\u00c8\u00c9\7c\2\2"+
		"\u00c9\u00ca\7m\2\2\u00ca \3\2\2\2\u00cb\u00cc\7e\2\2\u00cc\u00cd\7q\2"+
		"\2\u00cd\u00ce\7p\2\2\u00ce\u00cf\7v\2\2\u00cf\u00d0\7k\2\2\u00d0\u00d1"+
		"\7p\2\2\u00d1\u00d2\7w\2\2\u00d2\u00d3\7g\2\2\u00d3\"\3\2\2\2\u00d4\u00d5"+
		"\7t\2\2\u00d5\u00d6\7g\2\2\u00d6\u00d7\7v\2\2\u00d7\u00d8\7w\2\2\u00d8"+
		"\u00d9\7t\2\2\u00d9\u00da\7p\2\2\u00da$\3\2\2\2\u00db\u00dd\t\2\2\2\u00dc"+
		"\u00db\3\2\2\2\u00dd\u00de\3\2\2\2\u00de\u00dc\3\2\2\2\u00de\u00df\3\2"+
		"\2\2\u00df\u00e0\3\2\2\2\u00e0\u00e1\b\23\2\2\u00e1&\3\2\2\2\u00e2\u00e3"+
		"\7\61\2\2\u00e3\u00e4\7\61\2\2\u00e4\u00e8\3\2\2\2\u00e5\u00e7\13\2\2"+
		"\2\u00e6\u00e5\3\2\2\2\u00e7\u00ea\3\2\2\2\u00e8\u00e9\3\2\2\2\u00e8\u00e6"+
		"\3\2\2\2\u00e9\u00eb\3\2\2\2\u00ea\u00e8\3\2\2\2\u00eb\u00f8\7\f\2\2\u00ec"+
		"\u00ed\7\61\2\2\u00ed\u00ee\7,\2\2\u00ee\u00f2\3\2\2\2\u00ef\u00f1\13"+
		"\2\2\2\u00f0\u00ef\3\2\2\2\u00f1\u00f4\3\2\2\2\u00f2\u00f3\3\2\2\2\u00f2"+
		"\u00f0\3\2\2\2\u00f3\u00f5\3\2\2\2\u00f4\u00f2\3\2\2\2\u00f5\u00f6\7,"+
		"\2\2\u00f6\u00f8\7\61\2\2\u00f7\u00e2\3\2\2\2\u00f7\u00ec\3\2\2\2\u00f8"+
		"\u00f9\3\2\2\2\u00f9\u00fa\b\24\2\2\u00fa(\3\2\2\2\u00fb\u00fc\7*\2\2"+
		"\u00fc*\3\2\2\2\u00fd\u00fe\7+\2\2\u00fe,\3\2\2\2\u00ff\u0100\7]\2\2\u0100"+
		".\3\2\2\2\u0101\u0102\7_\2\2\u0102\60\3\2\2\2\u0103\u0104\7}\2\2\u0104"+
		"\62\3\2\2\2\u0105\u0106\7\177\2\2\u0106\64\3\2\2\2\u0107\u0108\7A\2\2"+
		"\u0108\66\3\2\2\2\u0109\u010a\7<\2\2\u010a8\3\2\2\2\u010b\u010c\7=\2\2"+
		"\u010c:\3\2\2\2\u010d\u010e\7.\2\2\u010e<\3\2\2\2\u010f\u0110\7-\2\2\u0110"+
		">\3\2\2\2\u0111\u0112\7/\2\2\u0112@\3\2\2\2\u0113\u0114\7,\2\2\u0114B"+
		"\3\2\2\2\u0115\u0116\7\61\2\2\u0116D\3\2\2\2\u0117\u0118\7\'\2\2\u0118"+
		"F\3\2\2\2\u0119\u011a\7>\2\2\u011aH\3\2\2\2\u011b\u011c\7@\2\2\u011cJ"+
		"\3\2\2\2\u011d\u011e\7>\2\2\u011e\u011f\7?\2\2\u011fL\3\2\2\2\u0120\u0121"+
		"\7@\2\2\u0121\u0122\7?\2\2\u0122N\3\2\2\2\u0123\u0124\7?\2\2\u0124\u0125"+
		"\7?\2\2\u0125P\3\2\2\2\u0126\u0127\7#\2\2\u0127\u0128\7?\2\2\u0128R\3"+
		"\2\2\2\u0129\u012a\7(\2\2\u012a\u012b\7(\2\2\u012bT\3\2\2\2\u012c\u012d"+
		"\7~\2\2\u012d\u012e\7~\2\2\u012eV\3\2\2\2\u012f\u0130\7#\2\2\u0130X\3"+
		"\2\2\2\u0131\u0132\7>\2\2\u0132\u0133\7>\2\2\u0133Z\3\2\2\2\u0134\u0135"+
		"\7@\2\2\u0135\u0136\7@\2\2\u0136\\\3\2\2\2\u0137\u0138\7(\2\2\u0138^\3"+
		"\2\2\2\u0139\u013a\7~\2\2\u013a`\3\2\2\2\u013b\u013c\7`\2\2\u013cb\3\2"+
		"\2\2\u013d\u013e\7\u0080\2\2\u013ed\3\2\2\2\u013f\u0140\7?\2\2\u0140f"+
		"\3\2\2\2\u0141\u0142\7-\2\2\u0142\u0143\7-\2\2\u0143h\3\2\2\2\u0144\u0145"+
		"\7/\2\2\u0145\u0146\7/\2\2\u0146j\3\2\2\2\u0147\u0148\7\60\2\2\u0148l"+
		"\3\2\2\2\u0149\u014d\t\3\2\2\u014a\u014c\t\4\2\2\u014b\u014a\3\2\2\2\u014c"+
		"\u014f\3\2\2\2\u014d\u014b\3\2\2\2\u014d\u014e\3\2\2\2\u014e\u0152\3\2"+
		"\2\2\u014f\u014d\3\2\2\2\u0150\u0152\7\62\2\2\u0151\u0149\3\2\2\2\u0151"+
		"\u0150\3\2\2\2\u0152n\3\2\2\2\u0153\u0157\7$\2\2\u0154\u0156\5{>\2\u0155"+
		"\u0154\3\2\2\2\u0156\u0159\3\2\2\2\u0157\u0158\3\2\2\2\u0157\u0155\3\2"+
		"\2\2\u0158\u015a\3\2\2\2\u0159\u0157\3\2\2\2\u015a\u015b\7$\2\2\u015b"+
		"p\3\2\2\2\u015c\u015d\7h\2\2\u015d\u015e\7$\2\2\u015e\u0162\3\2\2\2\u015f"+
		"\u0161\5}?\2\u0160\u015f\3\2\2\2\u0161\u0164\3\2\2\2\u0162\u0160\3\2\2"+
		"\2\u0162\u0163\3\2\2\2\u0163\u0165\3\2\2\2\u0164\u0162\3\2\2\2\u0165\u0166"+
		"\7$\2\2\u0166r\3\2\2\2\u0167\u016b\7&\2\2\u0168\u016a\5}?\2\u0169\u0168"+
		"\3\2\2\2\u016a\u016d\3\2\2\2\u016b\u0169\3\2\2\2\u016b\u016c\3\2\2\2\u016c"+
		"\u016e\3\2\2\2\u016d\u016b\3\2\2\2\u016e\u016f\7$\2\2\u016ft\3\2\2\2\u0170"+
		"\u0174\7&\2\2\u0171\u0173\5}?\2\u0172\u0171\3\2\2\2\u0173\u0176\3\2\2"+
		"\2\u0174\u0172\3\2\2\2\u0174\u0175\3\2\2\2\u0175\u0177\3\2\2\2\u0176\u0174"+
		"\3\2\2\2\u0177\u0178\7&\2\2\u0178v\3\2\2\2\u0179\u017a\7h\2\2\u017a\u017b"+
		"\7$\2\2\u017b\u017f\3\2\2\2\u017c\u017e\5}?\2\u017d\u017c\3\2\2\2\u017e"+
		"\u0181\3\2\2\2\u017f\u017d\3\2\2\2\u017f\u0180\3\2\2\2\u0180\u0182\3\2"+
		"\2\2\u0181\u017f\3\2\2\2\u0182\u0183\7&\2\2\u0183x\3\2\2\2\u0184\u0188"+
		"\t\5\2\2\u0185\u0187\t\6\2\2\u0186\u0185\3\2\2\2\u0187\u018a\3\2\2\2\u0188"+
		"\u0186\3\2\2\2\u0188\u0189\3\2\2\2\u0189z\3\2\2\2\u018a\u0188\3\2\2\2"+
		"\u018b\u0193\n\7\2\2\u018c\u018d\7^\2\2\u018d\u0193\7^\2\2\u018e\u018f"+
		"\7^\2\2\u018f\u0193\7p\2\2\u0190\u0191\7^\2\2\u0191\u0193\7$\2\2\u0192"+
		"\u018b\3\2\2\2\u0192\u018c\3\2\2\2\u0192\u018e\3\2\2\2\u0192\u0190\3\2"+
		"\2\2\u0193|\3\2\2\2\u0194\u019e\n\b\2\2\u0195\u0196\7^\2\2\u0196\u019e"+
		"\7^\2\2\u0197\u0198\7^\2\2\u0198\u019e\7p\2\2\u0199\u019a\7^\2\2\u019a"+
		"\u019e\7$\2\2\u019b\u019c\7&\2\2\u019c\u019e\7&\2\2\u019d\u0194\3\2\2"+
		"\2\u019d\u0195\3\2\2\2\u019d\u0197\3\2\2\2\u019d\u0199\3\2\2\2\u019d\u019b"+
		"\3\2\2\2\u019e~\3\2\2\2\21\2\u00de\u00e8\u00f2\u00f7\u014d\u0151\u0157"+
		"\u0162\u016b\u0174\u017f\u0188\u0192\u019d\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}